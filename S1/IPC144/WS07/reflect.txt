///////////////////////////////////////////////////////////////////////////
                               Reflection
                             Workshop - #7
Full Name  :CHI-WEI PERNG
Student ID#:121967228

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

1. Were you successful in coding non-repetitive sections of logic in the game play portion of this workshop (drawing of the ruler, board, player position, etc.)? If so, how did you accomplish this (don’t provide your code in your answer)? If not, why? Explain precisely what you struggled with and refer to the logic of the workshop to justify your answer.
Ans:
I am a little confuse about how to program how to print out the last board status. I originally wanted to pull this block of the code into a function, but I do not know how to pass the entire struct address since the class only teaches passing a single int or char address. 
So I used a temporary solution is use variable live (p1.lives) as a flag to print out the last board status. 


2. Explain how the use of structures simplified your program. Provide proof of your argument by contrasting the alternatives – do not include code in your answer – you must explain in simple terms the impact the concept of structures has in our programming strategies.
Ans:
Use a structure to manage “a game,” and “a player,” to centrally manage the parameters by structure. Use structures can reduce the number of variables that need to declare. Instead of declaring separate variables for each attribute of a game and player, I can declare one structure of game or player and access its attribute using dot notation. Using structures can simplify programs making code more readable and understandable, and making code more modular and reusable. 


3. Examine your code and determine the maximum number of levels of nesting (deepest) you ended up using in your program logic. Provide a simple indented outline that illustrates your answer (copy only the construct line for each level and do not include all the code within unless there is another nested construct). For example, two levels of nesting as an outline:
Ans:

I used four levels of nesting in main.

while (p1.lives != -1 && g1.moves != 0)
    {
        if (p1.lives >= 0)
        {
            for (i = 1; i < g1.pathlength + 1; i++)
            {
                if (p1.position == i)
                {
                }
            }
            for (i = 0; i < g1.pathlength; i++)
            {
                switch (g1.visited[i])
                {
                }
            }
        }
    }