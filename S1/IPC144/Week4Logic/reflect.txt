///////////////////////////////////////////////////////////////////////////
                               Reflection
                             Workshop - #4
Full Name  :CHI-WEI PERNG
Student ID#:121967228

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

1. With the completion of this workshop, you must have begun to appreciate why code formatting is important. Explain how you made your code – especially the iteration and selection logic parts – easy to read and maintain.
With the helping of ( ) , { } and good formatting, we can make it much easier to understand what the structure of the code is. And can avoid the dangling situation. It can clarify where the code block starts and ends. 

2. Nested logic is an important feature of programming in any language. Identify and briefly discuss the biggest impact on how this workshop could be coded if nesting were not possible.
Nested constructs can be used in “Nested Selections” and “Nested Iterations”.  Nested logic helps us avoid writing the same logic when it can be used many times. If the workshop cannot use nested logic, the code will be much more line than the current version. Nested Iterations help when the same pattern is used many times and program not sure when it will be enough.   

3. Consider the following scenario: you are programming logic that requires a user to input a value between 1 and 5, and for each value within that range, you had to perform something unique. You would have to apply selection to validate the entered values so you can implement the given logic for a specific entered range value. Explain why is it inefficient to achieve this using a series of “if” optional path constructs instead of the preferred “if/else if...” alternative path logic?
// Use series of “if”		 

if(int==1){ 

 Do ... 

} 

if(int==2){ 

 Do ... 

} 

… 

if(int==5){ 

 Do ... 

} 

// Use if/else if 

if(int==1){ 

 Do ... 

}else if(int==2){ 

 Do ... 

} 

... 

}else if(int==5){ 

 Do ... 

} 

- If using series of “if” optional path, program will check every condition. This will waste time and computing power if only one condition fits; the other would not. 

- Because by using “if/else if” this kind of compound conditions. If one of the conditions is true, the program skips the rest of the other conditions and runs only one sequence.
