-- connect two columns together and give it a name
TRIM(ContactFirstName) || ' ' || TRIM(ContactLastName) AS fullName,
CONCAT(CONCAT(TRIM(ContactFirstName),' '),TRIM(ContactLastName)) AS fullName


-- convert a number to a string
TO_CHAR(orderDate,'Mon dd, yyyy') AS charDate


-- Between
WHERE creditLimit >= 40000 AND creditLimit <= 80000
WHERE creditLimit BETWEEN 40000 AND 80000

WHERE creditLimit < 40000 OR creditLimit > 80000
WHERE creditLimit NOT BETWEEN 40000 AND 80000


-- 
WHERE UPPER(TRIM(customerName)) = 'SCHUYLER IMPORTS';

-- starts with S
WHERE LOWER(customerName) LIKE 's%';
-- ends with s
WHERE LOWER(customerName) LIKE '%s';
-- contains an s
WHERE LOWER(customerName) LIKE '%s%';
-- starts with and ends with an S
WHERE LOWER(customerName) LIKE 's%s';


-- INSERT
INSERT ALL 
INTO employees VALUES (1800, 'MacDonald', 'Clint', 'x1234', 'clint.macdonald@senecacollege.ca', 4, 1088, 'Cashier')
INTO employees VALUES (1801, 'Smeltzer', 'Kim', 'x4567', 'kim.smeltzer@email.com', 4, 1800, 'Cashier')
SELECT * FROM dual;



-- Week4

-- GOOD ANSI-92 Join
SELECT
    customers.customernumber AS cc,
    orders.customernumber AS oc,
    customername,
    ordernumber,
    orderdate
FROM customers INNER JOIN orders
    ON customers.customernumber = orders.customernumber
ORDER BY customername;

-- List all the customers and the orders they have placed
SELECT 
    c.customernumber,
    o.customernumber,
    customername,
    ordernumber,
    orderdate
FROM customers c LEFT OUTER JOIN orders o
    ON c.customernumber = o.customernumber
ORDER BY 
    customername, 
    orderdate;


-- List each product that each customer has ordered, 
-- include ALL customers.
SELECT 
    c.customernumber,
    customername,
    p.productcode,
    productname
FROM customers c
    LEFT OUTER JOIN orders o ON c.customernumber = o.customernumber
    LEFT OUTER JOIN orderdetails od ON o.ordernumber = od.ordernumber
    LEFT OUTER JOIN products p ON p.productcode = od.productcode
ORDER BY 
    customername,
    productname;

-- is the same as.....
SELECT 
    c.customernumber,
    customername,
    p.productcode,
    productname
FROM products p
    JOIN orderdetails od ON p.productcode = od.productcode
    JOIN orders o ON o.ordernumber = od.ordernumber
    RIGHT OUTER JOIN customers c ON c.customernumber = o.customernumber
ORDER BY 
    customername,
    productname;

-- USING
SELECT customernumber, customername, amount, country
FROM customers LEFT JOIN payments USING (customernumber)
WHERE upper(country) = 'USA' AND amount IS NULL
ORDER BY customernumber;


-- VIEWS
CREATE OR REPLACE VIEW vwCustomerWithNoOrders AS
    SELECT 
        c.customerNumber,
        customerName
    FROM customers c
        LEFT OUTER JOIN orders o ON c.customerNumber = o.customerNumber
    WHERE orderNumber IS NULL
    ORDER BY c.customerNumber;


-- Week5

-- Example
CREATE TABLE xPeople (
    personID INT PRIMARY KEY,
    lastName VARCHAR(25) NOT NULL,
    firstname VARCHAR(25) NOT NULL,
    dob DATE,
    email VARCHAR(100) UNIQUE NOT NULL,
    prov CHAR(2) DEFAULT 'ON',
    address VARCHAR(200)
    );
    
-- Players Table
CREATE TABLE xPlayers (
    playerID INT,
    EmergencyContact VARCHAR(100),
    ECPhone NUMBER(11) NOT NULL,
    PrefPos CHAR(2)
        CHECK (PrefPos IN ('GK','FB','MF','ST')),
    DomFoot CHAR(1) CHECK (DomFoot IN ('L', 'R')),
    CONSTRAINT xPlayers_PK PRIMARY KEY (playerID),
    CONSTRAINT people_players_FK FOREIGN KEY
        (playerID) REFERENCES xPeople(personID)
    );


-- ALTER
-- add a position column to the roster table
ALTER TABLE xRosters
    ADD pos CHAR(2) CHECK (pos IN ('GK','FB','MF','ST'));

    
-- AUTONUMBER
-- GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY
CREATE TABLE xFields (
    fieldID NUMBER(3) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    locationName VARCHAR(25) NOT NULL,
    fieldLength NUMBER(3) DEFAULT 0,
    address VARCHAR(100)
)

ALTER TABLE xGames
    ADD CONSTRAINT games_fields_FK FOREIGN KEY (locationID)
        REFERENCES xFields(fieldID);
        
-- locationID is not required
-- first, make sure no data has null values in this column
ALTER TABLE xGames
    ADD CONSTRAINT games_loc_REQ CHECK (locationID IS NOT NULL); 


-- Create a new empty table employee2 the same as table employees.  Use a single statement to create the table and insert the data at the same time.
CREATE TABLE employee2 AS
(SELECT * FROM employees);


-- Week6

SAVEPOINT w;
INSERT INTO w6Transactions VALUES (NULL, -1000, sysdate, 2);
UPDATE w6Accounts SET balance = balance - 1000 WHERE accountID = 2;
-- deposit
SAVEPOINT d;
INSERT INTO w6Transactions VALUES (NULL, 1000, sysdate, 1);
UPDATE w6Accounts SET balance = balance + 1000 WHERE accountID = 1;
     
SELECT * FROM w6Accounts;

ROLLBACK TO d;
ROLLBACK;


-- 
SELECT DISTINCT 


-- 19.	Write a statement that denies all access to the newemployees table for all public users
REVOKE ALL ON newEmployees FROM PUBLIC;

-- 20.	Write a statement that allows a classmate (use their database login) read only access to the newemployees table.
GRANT SELECT ON newEmployees TO dbs211_232nee30;

-- 21.	Write a statement that allows the same classmate to modify (insert, update and delete) the data of the newemployees table.
GRANT INSERT, UPDATE, DELETE ON newEmployees TO dbs211_232nee30;

-- 22.	Write a statement the denies all access to the newemployees table for the same classmate.
REVOKE ALL ON newEmployees FROM dbs211_232nee30;

