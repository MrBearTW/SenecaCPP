const { countTrue, countFalse } = require('./solutions');

describe('Problem 9 - countTrue(), countFalse() functions', function () {
  test('countTrue() works for all expected "true" values', function () {
    expect(
      countTrue(
        'Yes',
        'yes',
        'YES',
        'Y',
        'Oui',
        'oui',
        'OUI',
        'O',
        't',
        'TRUE',
        true,
        'True',
        'VRAI',
        'vrai',
        'V',
        1,
        2,
        3,
        100000
      )
    ).toBe(19);
  });

  test('countTrue() works for any values', function () {
    expect(
      countTrue(
        'Yes',
        'yes',
        'YES',
        'Y',
        'Oui',
        'oui',
        'OUI',
        'O',
        't',
        'TRUE',
        true,
        'True',
        'VRAI',
        'vrai',
        'V',
        1,
        2,
        3,
        100000,
        'No',
        'Non',
        'no',
        'non',
        'NO',
        'NON',
        'N',
        'n',
        'f',
        'FAUX',
        'faux',
        'FALSE',
        false,
        'False',
        0,
        -1,
        -100000,
        null,
        undefined
      )
    ).toBe(19);
  });

  test('countFalse() works for all expected "false" values', function () {
    expect(
      countFalse(
        'No',
        'Non',
        'no',
        'non',
        'NO',
        'NON',
        'N',
        'n',
        'f',
        'FAUX',
        'faux',
        'FALSE',
        false,
        'False',
        0,
        -1,
        -100000
      )
    ).toBe(17);
  });

  test('countFalse() works for any values', function () {
    expect(
      countFalse(
        'Yes',
        'yes',
        'YES',
        'Y',
        'Oui',
        'oui',
        'OUI',
        'O',
        't',
        'TRUE',
        true,
        'True',
        'VRAI',
        'vrai',
        'V',
        1,
        2,
        3,
        100000,
        'No',
        'Non',
        'no',
        'non',
        'NO',
        'NON',
        'N',
        'n',
        'f',
        'FAUX',
        'faux',
        'FALSE',
        false,
        'False',
        0,
        -1,
        -100000,
        null,
        undefined
      )
    ).toBe(17);
  });
});
